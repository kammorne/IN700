16/09/19
So today we had another meeting to decide what we were gonna do for the next 2 weeks before the holidays. We decided we needed to focus on getting data from the database onto the orokonui web app, so
I was tasked with doing that. Bee and I began looking into how the app actually got data already, and found out that most if not all of the data on the web app itself was all hardcoded, which actually
made it easier, since we didn't have to alter the already existing code for it to work. We began tinkering with the data page on the web app, and soon enough, we got a basic query to get an entry from
the database for the prototype gate that Bee had created. With that being done, we began looking at how to get the data to the map. Unfortunately, this is where we got stuck, we tried many different options,
but for some reason I could not get the map to update with the required information, even though we were using an AJAX request to get the information from the database.
19/09/19
After looking over the web app during the week, I found out why we may not have had any luck with the map getting information. After using a bunch of console.log() commands, we found that even though the AJAX
request was getting the data, as soon as we went to run the updateMap() function, the information was undefined. I began looking into solutions to fix this, and soon enough I found something that kind've worked.

The solution I had, (Although it didn't turn out to fully fix the issue), was to have the AJAX request in the updateMap() function. This actually let us access the data that was being requested by the AJAX ruquest, 
and it also meant that the information wasn't being lost.
23/09/19
So Today, we had Tony come in to look at what we had done for Orokonui, and although we had the data showing on the web app, it wasn't up to the standard that I wanted it to be. While he looked at the prototypes that 
the team had developed, I tinkered away at the web app, trying to get the map interface working correctly. I soon found out another issue with the implementation I had done last week. I found out that since it's an AJAX request,
which is Asyncronous, it was getting the data after the rest of the code was being run. I managed to fix this by changing the AJAX Request to run all the gate information updates inside the request function, which then meant that
the data that was being collected by the AJAX request was being instantly used instead of sitting like it was before. I had also optimized it so that it wasn't making the AJAX request for each gate, saving on bandwidth.

After the tinkering I had done, I finally got the map displaying a single gate's data over all of the labels on the map, which made it interesting when we were showing Tony, and once the gate was unlocked, all the labels went red,
rather than just the one the gate it was connected to.
24/09/19
So today I wanted to optimize the map and fix the prototype issues we were having yesterday. I changed the SQL query to select all of the gates, instead of only one of them, but that instantly threw an error regarding decoding the
information. I looked at the query on phpMyAdmin and found out that the query I had written was selecting the earliest entry from each gate, which meant that some of them had un-decodable payloads, which was making my code for getting
the gate's state break the site. I asked some of my classmates who were taking Databases 3 if they had any idea where I was going wrong with the query, and they even went and tried creating some queries themselves, as well as asking Krissi
if she knew how to achieve what we wanted, but unfortunately, they could not find a solution with how we had the database set up.
26/09/19
So today, I continued to tinker with the SQL Query that I had been working on on Tuesday, and after 20-30 minutes of trying different options, I finally managed to get an SQL query that worked how I wanted it to. I then proceeded to update the
Javascript so that all the gates would display the new information, but for that to work without errors, I had to limit the gates to 5 instead of 6, since we don't currently have enough boards to create another gate prototype for them all to show up.

<image>

After I got the map working, I began working with some of the javascript files trying to prevent some console errors. Unfortunately, the way that James set up the web app, he had it so that every html page uses the same JS files, meaning that on
one page, it would try to load the map when the map isn't there, and on another it would try to load the graphs for the data, but there's no container for the graphs.

I fixed the map error by having a location check on the JS file, so that the code only runs if the user is on the correct page. This isn't the best solution, but it works for now until I can find a new solution.

14/10/19
After our small break over the holidays, we returned ready to begin on a new sprint. Martin greeted us, and let us know that the heatmap webapp wasn't reading data, and hasn't for nearly a month (late September) I figured that it was
related to when we changed over to The Things Network, and offered to take on the task of fixing the issue. Josh also offered to give me a hand, since he wanted to have a closer look at the webapp, since he was going to be installing
the webapp onto the Docker Server once it was done.

After looking into the VM for the heatmap, I soon figured out that it was as I suspected, and that the code was calling from the old LoRa network MQTT Broadcasts, so it wasn't able to update the information. Luckily, Henry had already updated
the code to work with The Things Network, so I thought it would be an easy task of doing a 'git pull' in the repository the app was saved in. However, it wasn't that easy, as we soon found out that the webapp was saved in someone's private repository,
and it wasn't giving us access because of that. Henry also let me know that the app was being hosted via a 'screen' command, rather than a service or even as an apache service. I knew this wouldn't work in the long run, and ended up looking into
hosting the app properly, however it soon became quite a task where I had to jump through a lot of hoops to get it working. In the end, I didn't even get it running, and began looking into getting the app running on apache, since it looked like the app's
backend was run on Django.

Josh and I ended up getting an Apache server running, however the server wouldn't accept the Django files. In the end, I was both getting frustrated and had to leave to get to an appointment, so I decided to leave it and come back once I had a level head.

17/10/19
After tinkering with the Heatmap webapp since Monday, Josh and I figured out that the webapp was run on a React build, not a Django build. After figuring this out, and spending some time on Wednesday trying to get the webapp working, We figured we'd just
set up the webapp to run on the Docker container instead of focusing on running it on apache, since we wouldn't even be using it for more than a few weeks while we organized the Docker container. I decided to keep the webapp running on the old janky way
of running it on a 'screen' prompt.

I went to help Josh with getting the webapp running on a Docker container, but soon found out that the app was being finicky with running the 'npm build' command. We spent a while trying to get the app to build the latest version, since the current build
version was running the old MQTT broadcast files. We also found out that the only way to get the MQTT broadcasts to be read by the app was to have a relay running. We also found out that said relay was running on Henry's local machine, which would not work
at all once he leaves, or turns off his machine. So Josh and I decided that we wouldn't bother trying to get the Heatmap running on the Docker container for the moment, but instead focus on getting the relay onto a Docker container, since at least in the current
form, the app will still run on the VM, however once Henry leaves it will be impossible to have the heatmap collect data.

21/10/19
Today I went through the orokonui web app that was running on the live Docker container, and soon found out that it wasn't running the up-to-date version of the files which had the SQL implementation, so I initiated a merge request for the branch I was working on
on my local machine, and once that was merged, I began work on getting the files onto the live server. I thought it would be a simple git pull, however once I did that, the live site broke, and wouldn't show the map. I consulted Josh, since he knew about how the
docker container worked, and he let me know that it may be because the container hasn't been updated, so he taught me about the 'docker-compose build' and 'docker-compose up' commands. So I ran those two commands, checked the server, and found that it fully broke the
web app and brought it down to an "Internal Server Error".

Looking at the logs of the docker container, we soon found that it wasn't importing the required files, and it wasn't accessing the .ENV file that we installed for security. After some tinkering with files and adding the .ENV file to the container, we got the webapp
running on the new files, however it wouldn't load the map still, I went to check the other pages to see if those worked, which they did, but then once we went back to the map page, the map loaded and showed the correct information.

After we made sure the map was fully working, I went on to update the Documentation for the web app to include the information for the docker container, and a better way to install the requirements for a local machine.

24/10/19
Solder Boards, 3D Print Cases

28/10/19
Solder Boards, 3D Print Cases

31/10/19
Orokonui Trip

4/11/19
Solder More Boards

7/11/19
Fix 3d Prints, Re-solder Boards where CO2 sensor was broken

8/11/19
Contact Dev Ops about broken Database VM

11/11/19
Continue contact with Dev Ops about ongoing issue relating to Database VM
Send information to Neville of C02 Readings

SELECT time, CONV(SUBSTRING(HEX(FROM_BASE64(payload)), 1, 4), 16, 10) FROM data WHERE app_id = "op_c02" AND time > "2019-11-04 23:59:59" ORDER BY data.time < SQL

14/11/19
Second Orokonui Trip - Install second gate, fix current gate (replace antenna)
Fix routes on orokonui web app, begin fixing images on web app

18/11/19
modify classroom sensor cases for CO2 sensors, 3d print new cases, continue work on fixing webapp images

21/11/19
Prepare Room for Showcase, move IoT Area to where Games Dev used to be